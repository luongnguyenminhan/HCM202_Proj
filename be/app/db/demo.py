"""
Example usage of the HCM Thoughts RAG models.
Demonstrates CRUD operations and relationships.
"""

from datetime import datetime
from sqlmodel import Session, select
from app.core.database import engine
from app.models import (
	Document,
	DocumentCreate,
	Chapter,
	ChapterCreate,
	Chunk,
	ChunkCreate,
	Quote,
	QuoteCreate,
)


def create_sample_data():
	"""Create sample data to demonstrate the models"""

	with Session(engine) as session:
		# Create a document
		document_data = DocumentCreate(
			title='T∆∞ t∆∞·ªüng H·ªì Ch√≠ Minh v·ªÅ x√¢y d·ª±ng con ng∆∞·ªùi',
			description='T√†i li·ªáu v·ªÅ t∆∞ t∆∞·ªüng H·ªì Ch√≠ Minh trong vi·ªác x√¢y d·ª±ng con ng∆∞·ªùi m·ªõi',
			source='Nh√† xu·∫•t b·∫£n Ch√≠nh tr·ªã Qu·ªëc gia',
		)
		document = Document.model_validate(document_data.model_dump())
		session.add(document)
		session.commit()
		session.refresh(document)

		print(f'üìÑ Created document: {document.title} (ID: {document.id})')

		# Create chapters
		chapters_data = [
			ChapterCreate(
				document_id=document.id,
				title='Ch∆∞∆°ng 1: T∆∞ t∆∞·ªüng gi√°o d·ª•c con ng∆∞·ªùi',
				ordering=1,
				summary='Quan ƒëi·ªÉm c·ªßa H·ªì Ch√≠ Minh v·ªÅ gi√°o d·ª•c v√† ph√°t tri·ªÉn con ng∆∞·ªùi',
			),
			ChapterCreate(
				document_id=document.id,
				title='Ch∆∞∆°ng 2: ƒê·∫°o ƒë·ª©c c√°ch m·∫°ng',
				ordering=2,
				summary='T∆∞ t∆∞·ªüng v·ªÅ ƒë·∫°o ƒë·ª©c v√† ph·∫©m ch·∫•t c·ªßa ng∆∞·ªùi c√°ch m·∫°ng',
			),
		]

		chapters = []
		for chapter_data in chapters_data:
			chapter = Chapter.model_validate(chapter_data.model_dump())
			session.add(chapter)
			chapters.append(chapter)

		session.commit()
		for chapter in chapters:
			session.refresh(chapter)
			print(f'üìñ Created chapter: {chapter.title} (ID: {chapter.id})')

		# Create chunks for first chapter
		chunks_data = [
			ChunkCreate(
				chapter_id=chapters[0].id,
				chunk_index=0,
				qdrant_point_id='doc1_ch1_chunk0',
				chunk_text='H·ªì Ch√≠ Minh lu√¥n coi tr·ªçng vi·ªác gi√°o d·ª•c con ng∆∞·ªùi. Ng∆∞·ªùi cho r·∫±ng gi√°o d·ª•c l√† n·ªÅn t·∫£ng c·ªßa s·ª± ph√°t tri·ªÉn x√£ h·ªôi.',
			),
			ChunkCreate(
				chapter_id=chapters[0].id,
				chunk_index=1,
				qdrant_point_id='doc1_ch1_chunk1',
				chunk_text='Theo quan ƒëi·ªÉm c·ªßa B√°c H·ªì, con ng∆∞·ªùi c·∫ßn ƒë∆∞·ª£c ph√°t tri·ªÉn to√†n di·ªán c·∫£ v·ªÅ tr√≠ tu·ªá, ƒë·∫°o ƒë·ª©c v√† th·ªÉ ch·∫•t.',
			),
		]

		chunks = []
		for chunk_data in chunks_data:
			chunk = Chunk.model_validate(chunk_data.model_dump())
			session.add(chunk)
			chunks.append(chunk)

		session.commit()
		for chunk in chunks:
			session.refresh(chunk)
			print(f'üìù Created chunk: ID {chunk.id}, Index {chunk.chunk_index}')

		# Create quotes
		quote_data = QuoteCreate(
			chunk_id=chunks[0].id,
			quote_text='Gi√°o d·ª•c l√† n·ªÅn t·∫£ng c·ªßa s·ª± ph√°t tri·ªÉn x√£ h·ªôi',
			excerpt_start=50,
			excerpt_end=100,
		)

		quote = Quote.model_validate(quote_data.model_dump())
		session.add(quote)
		session.commit()
		session.refresh(quote)

		print(f'üí¨ Created quote: {quote.quote_text[:50]}...')

		return document.id


def query_with_relationships(document_id: int):
	"""Demonstrate querying with relationships"""

	with Session(engine) as session:
		# Query document with chapters
		statement = select(Document).where(Document.id == document_id)
		document = session.exec(statement).first()

		if document:
			print(f'\nüìö Document: {document.title}')
			print(f'   Created: {document.created_at}')
			print(f'   Chapters: {len(document.chapters)}')

			for chapter in document.chapters:
				print(f'   üìñ Chapter {chapter.ordering}: {chapter.title}')
				print(f'      Chunks: {len(chapter.chunks)}')

				for chunk in chapter.chunks:
					print(f'      üìù Chunk {chunk.chunk_index}: {chunk.chunk_text[:50]}...')
					if chunk.quotes:
						for quote in chunk.quotes:
							print(f'         üí¨ Quote: {quote.quote_text}')


def main():
	"""Main demonstration function"""
	print('üöÄ HCM Thoughts RAG Models Demo')
	print('=' * 50)

	# Create sample data
	document_id = create_sample_data()

	# Query with relationships
	query_with_relationships(document_id)

	print('\n‚úÖ Demo completed successfully!')


if __name__ == '__main__':
	main()
